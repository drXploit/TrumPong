<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation code
randomize();

//Variables
playerSpeed = 3;    // Player speed is 3

canFire = true;     // Limits being able to fire

canFireRate = 20;   // Fire only every 20 frames

resetRate = 4;      // Seconds for enemy respawn




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Respawn the enemy

if (!instance_exists(obj_enemy))
{
    if (global.start)
        instance_create(0,0,obj_enemy);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resets canFire to true

canFire = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player movement code

vspeed = 0;                                         // so speed doesnt go out of control
vspeed -= playerSpeed * keyboard_check(vk_up)       // go up
vspeed += playerSpeed * keyboard_check(vk_down);    // go down

if (vspeed != 0) &amp;&amp; (!place_free(x,y+vspeed))       // stop moving on wall contact
{
    vspeed = 0;
}
//if (keyboard_check(vk_space) || mouse_check_button(mb_left))// &amp;&amp; (canFire) //check spacebar
if (mouse_check_button(mb_left))// &amp;&amp; (canFire) //check spacebar
{
    if (mouse_x &gt; 96) &amp;&amp; (mouse_x &lt; 224)
    {
        if (mouse_y &lt; y)
        {
            vspeed -= playerSpeed;
        }
        else
        {
            vspeed += playerSpeed;
        }
    }
    else
    {
        if (canFire)
        {
            canFire = false;                    //inhibit firing rate
            alarm[0] = canFireRate;             //set timer for firing rate
            instance_create(x,y,obj_bullet);    //create a bullet
        }
    }
}
if (vspeed != 0) &amp;&amp; (!place_free(x,y+vspeed))       // stop moving on wall contact
{
    vspeed = 0;
}

if (!instance_exists(obj_enemy)) &amp;&amp; (alarm[1] == -1) &amp;&amp; (global.start)
{
    alarm[0] = room_speed*resetRate+1;  //one second enemy head start
    alarm[1] = room_speed*resetRate;    //delay after enemy kill
    audio_play_sound(snd_winner,9,false);
    canFire = false;                    //make sure player cant shoot during reset
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw code
draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha);

draw_set_font(font_main);

if (alarm[1] != -1)
{
    draw_set_alpha(1);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_set_color(c_white);
    draw_text(room_width/2,room_height/2,"Respawning in "+string( round(alarm[1]/100 + 1 ) ) + "!"); 
}
/*
draw_set_alpha(0.5);
draw_set_color(c_black);
draw_rectangle(0,  sprite_get_height(spr_wall)/3,sprite_get_width(spr_wall)*2,sprite_get_height(spr_wall)*(2/3),false);
draw_rectangle(64*3,sprite_get_height(spr_wall)/3,(64*3)+sprite_get_width(spr_wall)*2,sprite_get_height(spr_wall)*(2/3),false);
draw_rectangle(64*6,sprite_get_height(spr_wall)/3,(64*6)+sprite_get_width(spr_wall)*2,sprite_get_height(spr_wall)*(2/3),false);
draw_rectangle(64*9,sprite_get_height(spr_wall)/3,(64*9)+sprite_get_width(spr_wall)*3,sprite_get_height(spr_wall)*(2/3),false);

draw_set_alpha(1);
draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_color(c_yellow);
draw_text((sprite_get_width(spr_wall)/2)+20,sprite_get_height(spr_wall)/2,"Score:"+string(global.score));
draw_text((64*3)+sprite_get_width(spr_wall),sprite_get_height(spr_wall)/2,"Hit:"+string(global.hits));
draw_text((64*6)+sprite_get_width(spr_wall),sprite_get_height(spr_wall)/2,"Missed:"+string(global.missed));
draw_text((64*9)+sprite_get_width(spr_wall)+10,sprite_get_height(spr_wall)/2,"Bullets Fired:"+string(global.fired));
*/
/*if (debug_mode)
{
    draw_set_alpha(image_alpha);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_set_color(c_red);
    draw_text(x-sprite_get_width(sprite_index)/2,y+sprite_get_height(sprite_index)*(2/3),"Speed:"+string(speed));
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
